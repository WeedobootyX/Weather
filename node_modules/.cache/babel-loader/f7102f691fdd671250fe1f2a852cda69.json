{"ast":null,"code":"import * as actionTypes from './actionTypes';\nimport axios from '../axios';\nexport const getSensorListStart = () => {\n  return {\n    type: actionTypes.GET_SENSOR_LIST_START\n  };\n};\nexport const getSensorListSuccess = data => {\n  return {\n    type: actionTypes.GET_SENSOR_LIST_SUCCESS,\n    sensorList: data\n  };\n};\nexport const getSensorListFail = error => {\n  return {\n    type: actionTypes.GET_SENSOR_LIST_FAIL,\n    error: error\n  };\n};\nexport const getSensorValuesStart = () => {\n  return {\n    type: actionTypes.GET_SENSOR_VALUES_START\n  };\n};\nexport const getSensorValuesSuccess = data => {\n  return {\n    type: actionTypes.GET_SENSOR_VALUES_SUCCESS,\n    sensorValues: data\n  };\n};\nexport const getSensorValuesFail = error => {\n  return {\n    type: actionTypes.GET_SENSOR_VALUES_FAIL,\n    error: error\n  };\n};\nexport const getSensorList = (siteKey, deviceKey, apiKey) => {\n  return dispatch => {\n    dispatch(getSensorListStart());\n    const url = '/sensorlist/' + siteKey + '/' + deviceKey + '/' + apiKey;\n    const headers = {\n      'headers': {\n        'Content-Type': 'text/json'\n      }\n    };\n    axios.get(url, headers).then(res => {\n      dispatch(getSensorListSuccess(res.data));\n    }).catch(error => {\n      console.log('error', error);\n      dispatch(getSensorListFail(JSON.stringify(error)));\n    });\n  };\n};\nexport const getSensorValues = (siteKey, deviceKey, sensorKey, period) => {\n  return dispatch => {\n    dispatch(getSensorValuesStart());\n    const apiKey = 'abc123';\n    const url = '/sensor/values/' + siteKey + '/' + deviceKey + '/' + sensorKey + '/' + period + '/' + apiKey;\n    const headers = {\n      'headers': {\n        'Content-Type': 'text/json'\n      }\n    };\n    axios.get(url, headers).then(res => {\n      dispatch(getSensorValuesSuccess(res.data));\n    }).catch(error => {\n      console.log(\"error\", error);\n      dispatch(getSensorValuesFail(JSON.stringify(error)));\n    });\n  };\n};","map":{"version":3,"sources":["C:/git/weather/src/store/actions/sensorValues.js"],"names":["actionTypes","axios","getSensorListStart","type","GET_SENSOR_LIST_START","getSensorListSuccess","data","GET_SENSOR_LIST_SUCCESS","sensorList","getSensorListFail","error","GET_SENSOR_LIST_FAIL","getSensorValuesStart","GET_SENSOR_VALUES_START","getSensorValuesSuccess","GET_SENSOR_VALUES_SUCCESS","sensorValues","getSensorValuesFail","GET_SENSOR_VALUES_FAIL","getSensorList","siteKey","deviceKey","apiKey","dispatch","url","headers","get","then","res","catch","console","log","JSON","stringify","getSensorValues","sensorKey","period"],"mappings":"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","sourcesContent":["import * as actionTypes from './actionTypes'; \r\n\r\nimport axios from '../axios'; \r\n\r\nexport const getSensorListStart = () => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SENSOR_LIST_START\r\n\t}\r\n}\r\n\r\nexport const getSensorListSuccess = (data) => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SENSOR_LIST_SUCCESS, \r\n\t\tsensorList: data\r\n\t}\r\n}\r\n\r\nexport const getSensorListFail = (error) => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SENSOR_LIST_FAIL,\r\n\t\terror: error\r\n\t}\r\n}\r\n\r\nexport const getSensorValuesStart = () => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SENSOR_VALUES_START\r\n\t}\r\n}\r\n\r\nexport const getSensorValuesSuccess = (data) => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SENSOR_VALUES_SUCCESS, \r\n\t\tsensorValues: data\r\n\t}\r\n}\r\n\r\nexport const getSensorValuesFail = (error) => {\r\n\treturn {\r\n\t\ttype: actionTypes.GET_SENSOR_VALUES_FAIL,\r\n\t\terror: error\r\n\t}\r\n}\r\n\r\nexport const getSensorList = (siteKey, deviceKey, apiKey) => {\r\n\treturn dispatch => {\r\n\t\tdispatch(getSensorListStart());\r\n\t\tconst url = '/sensorlist/' + siteKey + '/' + deviceKey + '/' + apiKey; \r\n\t\tconst headers = {\r\n\t\t\t'headers': {\r\n\t\t\t\t'Content-Type': 'text/json'\r\n\t\t\t}\r\n\t\t}\r\n\t\taxios.get(url, headers)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(getSensorListSuccess(res.data)); \r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log('error', error);\r\n\t\t\t\tdispatch(getSensorListFail(JSON.stringify(error)))\r\n\t\t\t})\r\n\t}\r\n}\r\n\r\nexport const getSensorValues = (siteKey, deviceKey, sensorKey, period) => {\r\n\treturn dispatch => {\r\n\t\tdispatch(getSensorValuesStart());\r\n\t\tconst apiKey = 'abc123';\r\n\t\tconst url = '/sensor/values/' + siteKey + '/' + deviceKey + '/' + sensorKey + '/' + period + '/' + apiKey;\r\n\t\tconst headers = {\r\n\t\t\t'headers': {\r\n\t\t\t\t'Content-Type': 'text/json'\r\n\t\t\t}\r\n\t\t}\r\n\t\taxios.get(url, headers)\r\n\t\t\t.then(res => {\r\n\t\t\t\tdispatch(getSensorValuesSuccess(res.data));\r\n\t\t\t})\r\n\t\t\t.catch(error => {\r\n\t\t\t\tconsole.log(\"error\", error);\r\n\t\t\t\tdispatch(getSensorValuesFail(JSON.stringify(error)));\r\n\t\t\t});\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}