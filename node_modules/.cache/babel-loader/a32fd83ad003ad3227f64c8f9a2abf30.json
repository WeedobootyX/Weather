{"ast":null,"code":"import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../../shared/utility';\nconst initialState = {\n  sensorList: [],\n  sensorValues: [],\n  loading: false,\n  error: null\n};\n\nconst getSensorListStart = (state, action) => {\n  return updateObject(state, {\n    loading: true,\n    error: null\n  });\n};\n\nconst getSensorListSuccess = (state, action) => {\n  return updateObject(state, {\n    sensorList: action.sensorList,\n    loading: false\n  });\n};\n\nconst getSensorListFail = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    error: action.error\n  });\n};\n\nconst getPeriodSensorValuesStart = (state, action) => {\n  return updateObject(state, {\n    loading: true,\n    error: null\n  });\n};\n\nconst getPeriodSensorValuesSuccess = (state, action) => {\n  console.log('getPeriodSensorValuesSuccess: ', getPeriodSensorValuesSuccess);\n  return updateObject(state, {\n    sensorValues: action.sensorValues,\n    loading: false\n  });\n};\n\nconst getPeriodSensorValuesFail = (state, action) => {\n  return updateObject(state, {\n    loading: false,\n    error: action.error\n  });\n};\n\nconst weatherDataReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_SENSOR_LIST_START:\n      return getSensorListStart(state, action);\n\n    case actionTypes.GET_SENSOR_LIST_SUCCESS:\n      return getSensorListSuccess(state, action);\n\n    case actionTypes.GET_SENSOR_LIST_FAIL:\n      return getSensorListFail(state, action);\n\n    case actionTypes.GET_PERIOD_SENSOR_VALUES_START:\n      return getPeriodSensorValuesStart(state, action);\n\n    case actionTypes.GET_PERIOD_SENSOR_VALUES_SUCCESS:\n      return getPeriodSensorValuesSuccess(state, action);\n\n    case actionTypes.GET_PERIOD_SENSOR_VALUES_FAIL:\n      return getPeriodSensorValuesFail(state, action);\n\n    default:\n      return state;\n  }\n};\n\nexport default weatherDataReducer;","map":{"version":3,"sources":["C:/git/weather/src/store/reducers/weatherDataReducer.js"],"names":["actionTypes","updateObject","initialState","sensorList","sensorValues","loading","error","getSensorListStart","state","action","getSensorListSuccess","getSensorListFail","getPeriodSensorValuesStart","getPeriodSensorValuesSuccess","console","log","getPeriodSensorValuesFail","weatherDataReducer","type","GET_SENSOR_LIST_START","GET_SENSOR_LIST_SUCCESS","GET_SENSOR_LIST_FAIL","GET_PERIOD_SENSOR_VALUES_START","GET_PERIOD_SENSOR_VALUES_SUCCESS","GET_PERIOD_SENSOR_VALUES_FAIL"],"mappings":"AAAA,OAAO,KAAKA,WAAZ,MAA6B,wBAA7B;AACA,SAAQC,YAAR,QAA2B,sBAA3B;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,UAAU,EAAE,EADQ;AAEpBC,EAAAA,YAAY,EAAE,EAFM;AAGpBC,EAAAA,OAAO,EAAE,KAHW;AAIpBC,EAAAA,KAAK,EAAE;AAJa,CAArB;;AAOA,MAAMC,kBAAkB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7C,SAAOR,YAAY,CAACO,KAAD,EAAQ;AAC1BH,IAAAA,OAAO,EAAE,IADiB;AAE1BC,IAAAA,KAAK,EAAE;AAFmB,GAAR,CAAnB;AAIA,CALD;;AAOA,MAAMI,oBAAoB,GAAG,CAACF,KAAD,EAAQC,MAAR,KAAmB;AAC/C,SAAOR,YAAY,CAACO,KAAD,EAAQ;AAC1BL,IAAAA,UAAU,EAAEM,MAAM,CAACN,UADO;AAE1BE,IAAAA,OAAO,EAAE;AAFiB,GAAR,CAAnB;AAIA,CALD;;AAOA,MAAMM,iBAAiB,GAAG,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC5C,SAAOR,YAAY,CAACO,KAAD,EAAQ;AAC1BH,IAAAA,OAAO,EAAE,KADiB;AAE1BC,IAAAA,KAAK,EAAEG,MAAM,CAACH;AAFY,GAAR,CAAnB;AAIA,CALD;;AAOA,MAAMM,0BAA0B,GAAG,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AACrD,SAAOR,YAAY,CAACO,KAAD,EAAQ;AAC1BH,IAAAA,OAAO,EAAE,IADiB;AAE1BC,IAAAA,KAAK,EAAE;AAFmB,GAAR,CAAnB;AAIA,CALD;;AAOA,MAAMO,4BAA4B,GAAG,CAACL,KAAD,EAAQC,MAAR,KAAmB;AACvDK,EAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CF,4BAA9C;AACA,SAAOZ,YAAY,CAACO,KAAD,EAAQ;AAC1BJ,IAAAA,YAAY,EAAEK,MAAM,CAACL,YADK;AAE1BC,IAAAA,OAAO,EAAE;AAFiB,GAAR,CAAnB;AAIA,CAND;;AAQA,MAAMW,yBAAyB,GAAG,CAACR,KAAD,EAAQC,MAAR,KAAmB;AACpD,SAAOR,YAAY,CAACO,KAAD,EAAQ;AAC1BH,IAAAA,OAAO,EAAE,KADiB;AAE1BC,IAAAA,KAAK,EAAEG,MAAM,CAACH;AAFY,GAAR,CAAnB;AAIA,CALD;;AAOA,MAAMW,kBAAkB,GAAG,CAACT,KAAK,GAAGN,YAAT,EAAuBO,MAAvB,KAAkC;AAC5D,UAAOA,MAAM,CAACS,IAAd;AACC,SAAMlB,WAAW,CAACmB,qBAAlB;AAA0C,aAAOZ,kBAAkB,CAACC,KAAD,EAAQC,MAAR,CAAzB;;AAC1C,SAAMT,WAAW,CAACoB,uBAAlB;AAA4C,aAAOV,oBAAoB,CAACF,KAAD,EAAQC,MAAR,CAA3B;;AAC5C,SAAMT,WAAW,CAACqB,oBAAlB;AAAyC,aAAOV,iBAAiB,CAACH,KAAD,EAAQC,MAAR,CAAxB;;AAEzC,SAAMT,WAAW,CAACsB,8BAAlB;AAAmD,aAAOV,0BAA0B,CAACJ,KAAD,EAAQC,MAAR,CAAjC;;AACnD,SAAMT,WAAW,CAACuB,gCAAlB;AAAqD,aAAOV,4BAA4B,CAACL,KAAD,EAAQC,MAAR,CAAnC;;AACrD,SAAMT,WAAW,CAACwB,6BAAlB;AAAkD,aAAOR,yBAAyB,CAACR,KAAD,EAAQC,MAAR,CAAhC;;AAElD;AAAS,aAAOD,KAAP;AATV;AAWA,CAZD;;AAcA,eAAeS,kBAAf","sourcesContent":["import * as actionTypes from '../actions/actionTypes'; \r\nimport {updateObject} from '../../shared/utility'; \r\n\r\nconst initialState = {\r\n\tsensorList: [],\r\n\tsensorValues: [], \r\n\tloading: false,\r\n\terror: null\r\n}\r\n\r\nconst getSensorListStart = (state, action) => {\r\n\treturn updateObject(state, {\r\n\t\tloading: true, \r\n\t\terror: null\r\n\t})\r\n}\r\n\r\nconst getSensorListSuccess = (state, action) => {\r\n\treturn updateObject(state, {\r\n\t\tsensorList: action.sensorList,\r\n\t\tloading: false\r\n\t});\r\n}\r\n\r\nconst getSensorListFail = (state, action) => {\r\n\treturn updateObject(state, {\r\n\t\tloading: false,\r\n\t\terror: action.error\r\n\t})\r\n}\r\n\r\nconst getPeriodSensorValuesStart = (state, action) => {\r\n\treturn updateObject(state, {\r\n\t\tloading: true, \r\n\t\terror: null\r\n\t})\r\n}\r\n\r\nconst getPeriodSensorValuesSuccess = (state, action) => {\r\n\tconsole.log('getPeriodSensorValuesSuccess: ', getPeriodSensorValuesSuccess); \r\n\treturn updateObject(state, {\r\n\t\tsensorValues: action.sensorValues,\r\n\t\tloading: false\r\n\t});\r\n}\r\n\r\nconst getPeriodSensorValuesFail = (state, action) => {\r\n\treturn updateObject(state, {\r\n\t\tloading: false,\r\n\t\terror: action.error\r\n\t})\r\n}\r\n\r\nconst weatherDataReducer = (state = initialState, action) => {\r\n\tswitch(action.type){\r\n\t\tcase (actionTypes.GET_SENSOR_LIST_START): return getSensorListStart(state, action);\r\n\t\tcase (actionTypes.GET_SENSOR_LIST_SUCCESS): return getSensorListSuccess(state, action);\r\n\t\tcase (actionTypes.GET_SENSOR_LIST_FAIL): return getSensorListFail(state, action);\r\n\r\n\t\tcase (actionTypes.GET_PERIOD_SENSOR_VALUES_START): return getPeriodSensorValuesStart(state, action);\r\n\t\tcase (actionTypes.GET_PERIOD_SENSOR_VALUES_SUCCESS): return getPeriodSensorValuesSuccess(state, action);\r\n\t\tcase (actionTypes.GET_PERIOD_SENSOR_VALUES_FAIL): return getPeriodSensorValuesFail(state, action);\r\n\r\n\t\tdefault: return state;\r\n\t}\r\n}\r\n\r\nexport default weatherDataReducer; "]},"metadata":{},"sourceType":"module"}